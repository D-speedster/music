version: '3.8'

services:
  telegram-music-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-music-bot
    restart: unless-stopped
    
    # Environment variables
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_USER_ID=${ADMIN_USER_ID}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-50}
      - DAILY_LIMIT=${DAILY_LIMIT:-100}
      - MAX_CONCURRENT=${MAX_CONCURRENT:-3}
      - ENABLE_LOGGING=${ENABLE_LOGGING:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/bot.db}
    
    # Volume mounts
    volumes:
      - ./data:/app/data
      - ./temp:/app/temp
      - ./output:/app/output
      - ./logs:/app/logs
    
    # Network configuration
    networks:
      - bot-network
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: telegram-bot-redis
  #   restart: unless-stopped
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - bot-network
  #   command: redis-server --appendonly yes
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 128M
  #         cpus: '0.1'

  # Optional: PostgreSQL database (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: telegram-bot-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: telegram_bot
  #     POSTGRES_USER: bot_user
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - bot-network
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #         cpus: '0.2'

  # Optional: Monitoring with Prometheus (uncomment if needed)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: telegram-bot-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   networks:
  #     - bot-network
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Grafana for visualization (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: telegram-bot-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   networks:
  #     - bot-network

networks:
  bot-network:
    driver: bridge

volumes:
  # Uncomment volumes as needed
  # redis-data:
  # postgres-data:
  # prometheus-data:
  # grafana-data:

# Development override (create docker-compose.override.yml for local development)
# version: '3.8'
# services:
#   telegram-music-bot:
#     build:
#       target: development
#     volumes:
#       - .:/app
#     environment:
#       - DEBUG=true
#       - LOG_LEVEL=DEBUG
#     ports:
#       - "8080:8080"  # For debugging/health checks